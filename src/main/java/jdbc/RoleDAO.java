package jdbc;

import object.role.Name;
import object.role.Role;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Class RoleJDBC
 */
public class RoleDAO {
    private Connection connectDataBase;

    /**
     * Constructor RoleJDBC
     *
     * @param connectDataBase Creates a Statement object for sending SQL statements to the database.
     */
    public RoleDAO(Connection connectDataBase) {
        this.connectDataBase = connectDataBase;
    }

    /**
     * Insert object Role to database ROLE with parametric query
     *
     * @param role Object role
     * @param parameter enum of the Name
     */
    public void addRoleParametric(Role role, Name parameter) {
        try {
            if (parameter.equals(Name.Administration)) {
                insertWithParametricName(role, "INSERT INTO \"public\".\"ROLE\" VALUES (?, 'Administration', ?)");
            } else {
                if (parameter.equals(Name.Clients)) {
                    insertWithParametricName(role, "INSERT INTO \"public\".\"ROLE\" VALUES (?, 'Clients', ?)");
                }
                if (parameter.equals(Name.Billing)) {
                    insertWithParametricName(role, "INSERT INTO \"public\".\"ROLE\" VALUES (?, 'Billing', ?)");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Insert object Role to database ROLE with parametric query in Name
     *
     * @param role                  Object role
     * @param parametricQueryInsert Parametric query INSERT
     * @throws SQLException An exception that provides information on a database access error or other errors
     */
    private void insertWithParametricName(Role role, String parametricQueryInsert) throws SQLException {
        PreparedStatement prepStatement = connectDataBase.prepareStatement(parametricQueryInsert);
        excecutePrepareStatement(prepStatement, role);
    }

    /**
     * Handler for parametric id and description
     *
     * @param prepHandlerStatement Executes the SQL query in this PreparedStatement. object and returns the ResultSet object generated by the query.
     * @param roleHandler          Object role
     */
    private void excecutePrepareStatement(PreparedStatement prepHandlerStatement, Role roleHandler) {
        try {
            prepHandlerStatement.setInt(1, roleHandler.id);
            prepHandlerStatement.setString(2, roleHandler.description);
            prepHandlerStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Read object Role from database ROLE
     *
     * @return queryRole
     */
    public Role readRole(Integer idFromDatabase) {
        Role queryRole = null;
        PreparedStatement prepStatement;
        try {
            prepStatement = connectDataBase.prepareStatement("SELECT * FROM \"public\".\"ROLE\" WHERE (id = ?)");
            prepStatement.setInt(1, idFromDatabase);
            try (ResultSet resultSet = prepStatement.executeQuery()) {
                if (resultSet.next()) {
                    queryRole = fromResultSet(resultSet);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
        return queryRole;
    }

    /**
     * Get object Role from set
     *
     * @param resultSet A table of data representing a database result set, which
     *                  is usually generated by executing a statement that queries the database.
     * @return Object Role
     * @throws SQLException An exception that provides information on a database access error or other errors.
     */
    private static Role fromResultSet(ResultSet resultSet) throws SQLException {
        return new Role(resultSet.getInt("id"), resultSet.getString("name"), resultSet.getString("description"));
    }

    /**
     * Update object Role from database ROLE with parametric query
     *
     * @param role Object role
     * @param parameter enum of the Name
     */
    public void updateRoleParametric(Role role, Name parameter) {
        try {
            if (parameter.equals(Name.Administration)) {
                updateWithParametricName(role, "UPDATE \"public\".\"ROLE\" SET id = ?,name = 'Administration', description = ? WHERE id = ?");
            } else {
                if (parameter.equals(Name.Clients)) {
                    updateWithParametricName(role, "UPDATE \"public\".\"ROLE\" SET id = ?,name = 'Clients', description = ? WHERE id = ?");
                }
                if (parameter.equals(Name.Billing)) {
                    updateWithParametricName(role, "UPDATE \"public\".\"ROLE\" SET id = ?,name = 'Billing', description = ? WHERE id = ?");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Update object Role to database ROLE with parametric query in Name
     *
     * @param role Object role
     * @param parametricQueryInsert Parametric query INSERT
     * @throws SQLException An exception that provides information on a database access error or other errors
     */
    private void updateWithParametricName(Role role, String parametricQueryInsert) throws SQLException {
        PreparedStatement prepStatement;
        prepStatement = connectDataBase.prepareStatement(parametricQueryInsert);
        prepStatement.setInt(1, role.id);
        prepStatement.setString(2, role.description);
        prepStatement.setInt(3, role.id);
        prepStatement.executeUpdate();
    }

    /**
     * Delete object Role from database ROLE
     *
     * @param role Object role
     */
    public void deleteRole(Role role) {

        PreparedStatement prepStatement;
        try {
            prepStatement = connectDataBase.prepareStatement("DELETE FROM \"public\".\"ROLE\" WHERE id = ?");
            prepStatement.setInt(1, role.id);
            prepStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}